// Prisma schema file

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id                String  @id @default(uuid())
  username          String  @unique
  password          String
  name              String
  email             String
  phoneNumber       String
  profilePicture    String?
  bookings          Booking[]
  reviews           Review[]
}

model Host {
  id                String     @id @default(uuid())
  username          String     @unique
  password          String
  name              String
  email             String
  phoneNumber       String
  profilePicture    String
  aboutMe           String
  listings          Property[]
}

model Amenity {
  id      String  @id @default(uuid())
  name    String
  properties Property[]
}

model Property {
  id              String  @id @default(uuid())
  hostId          String
  title           String
  description     String
  location        String
  pricePerNight   Decimal @db.Decimal(10, 2)
  bedroomCount    Int
  bathRoomCount   Int
  maxGuestCount   Int
  rating          Int
  amenities       Amenity[]
  bookings        Booking[]
  reviews         Review[]

  host            Host @relation(fields: [hostId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  
  @@index([hostId])
}

model Booking {
  id              String  @id @default(uuid())
  userId          String
  propertyId      String
  checkinDate     DateTime
  checkoutDate    DateTime
  numberOfGuests  Int
  totalPrice      Decimal @db.Decimal(10, 2)
  bookingStatus   String

  bookedBy        User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  property        Property @relation(fields: [propertyId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  
  @@index([userId])
  @@index([propertyId])
}

model Review {
  id              String  @id @default(uuid())
  userId          String
  propertyId      String
  rating          Int
  comment         String?
  
  author          User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  property        Property @relation(fields: [propertyId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  
  @@index([userId])
  @@index([propertyId])
}